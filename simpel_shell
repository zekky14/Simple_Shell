#include "shell.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <fcntl.h>

#define MAX_LENGTH 1024

/**
 * main - Entry point
 * @argc: The number of arguments passed
 * @argv: An array of pointers to the arguments
 * @envp: An array of pointers to environment variables
 */

int main(int argc, char **argv, char **envp)
{
char *line;
char *args[MAX_LENGTH / 2 + 1];
int should_run = 1;

while (should_run) {
write(STDOUT_FILENO, "simple_shell> ", 14); // Display prompt

line = malloc(MAX_LENGTH);
fgets(line, MAX_LENGTH, stdin); // Read input from user

int i = 0;
args[i] = strtok(line, " \n"); // Tokenize input
while (args[i] != NULL) {
i++;
args[i] = strtok(NULL, " \n");
}
args[i] = NULL;

if (strcmp(args[0], "exit") == 0) { // Check for exit command
should_run = 0;
free(line);
break;
}

pid_t pid = fork(); // Create child process
if (pid == 0) { // Child process
if (access(args[0], F_OK) == -1) { // Check if command exists
write(STDERR_FILENO, "simple_shell: command not found: ", 33);
write(STDERR_FILENO, args[0], strlen(args[0]));
write(STDERR_FILENO, "\n", 1);
exit(1);
}
execve(args[0], args, envp); // Execute command
perror("execve");
exit(1);
} else if (pid > 0) { // Parent process
wait(NULL); // Wait for child process to finish
} else { // Error
write(STDERR_FILENO, "simple_shell: fork failed\n", 26);
exit(1);
}

free(line);
}

return 0;
}
